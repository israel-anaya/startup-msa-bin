input {
	beats {
		port => "5044"
	}
}

filter {

  if [message] =~ "Event:Exception" {
    grok {
      match => {
        "message" =>  
        "%{TIMESTAMP_ISO8601:ms.timestamp} *%{LOGLEVEL:ms.log.level} : ServiceId:%{DATA:ms.service.id}, Event:%{DATA:ms.event.type}, Method:%{DATA:ms.method}, URL:%{DATA:ms.url}, Error:%{GREEDYDATA:ms.error}"
      }
    }
  }

  if [message] =~ "Event:Start" {
    grok {
      match => {
        "message" =>  
        "%{TIMESTAMP_ISO8601:ms.timestamp} *%{LOGLEVEL:ms.log.level} : ServiceId:%{DATA:ms.service.id}, Event:%{DATA:ms.event.type}, Method:%{DATA:ms.method}, URL:%{DATA:ms.url}, tracking-id:%{DATA:ms.tracking.id}, consumer-id:%{DATA:ms.consumer.id}, channel-id:%{DATA:ms.channel.id}, application-id:%{GREEDYDATA:ms.application.id}"
      }
    }
  }

  if [message] =~ "Event:End" {
    grok {
      match => {
        "message" =>  
        "%{TIMESTAMP_ISO8601:ms.timestamp} *%{LOGLEVEL:ms.log.level} : ServiceId:%{DATA:ms.service.id}, Event:%{DATA:ms.event.type}, Method:%{DATA:ms.method}, URL:%{DATA:ms.url}, tracking-id:%{DATA:ms.tracking.id}, consumer-id:%{DATA:ms.consumer.id}, channel-id:%{DATA:ms.channel.id}, application-id:%{DATA:ms.application.id}, Time:%{GREEDYDATA:ms.exec.time}"
      }
    }
  }

                   

  mutate {
    remove_field => ["message", "log", "host", "agent"]
  }
}

output {
  
  stdout { codec => rubydebug }
  # Sending properly parsed log events to elasticsearch
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "startup-services"
  }

}